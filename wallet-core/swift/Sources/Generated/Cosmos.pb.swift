// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cosmos.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Amount
public struct TW_Cosmos_Proto_Amount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var denom: String = String()

  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Fee
public struct TW_Cosmos_Proto_Fee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amounts: [TW_Cosmos_Proto_Amount] = []

  public var gas: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Message for sending coins.
public struct TW_Cosmos_Proto_SendCoinsMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fromAddress: String = String()

  public var toAddress: String = String()

  public var amounts: [TW_Cosmos_Proto_Amount] = []

  /// default is cosmos-sdk/MsgSend
  public var typePrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Message for staking.
public struct TW_Cosmos_Proto_StakeMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddress: String {
    get {return _storage._delegatorAddress}
    set {_uniqueStorage()._delegatorAddress = newValue}
  }

  public var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  public var amount: TW_Cosmos_Proto_Amount {
    get {return _storage._amount ?? TW_Cosmos_Proto_Amount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {_uniqueStorage()._amount = nil}

  /// cosmos-sdk/MsgDelegate to stake and cosmos-sdk/MsgUndelegate to unstake
  public var typePrefix: String {
    get {return _storage._typePrefix}
    set {_uniqueStorage()._typePrefix = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Message for staking.
public struct TW_Cosmos_Proto_WithdrawStakeRewardMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddress: String = String()

  public var validatorAddress: String = String()

  /// default is cosmos-sdk/MsgWithdrawDelegationReward
  public var typePrefix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Signature
public struct TW_Cosmos_Proto_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicKey: Data = SwiftProtobuf.Internal.emptyData

  public var signature: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Transaction
public struct TW_Cosmos_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fee: TW_Cosmos_Proto_Fee {
    get {return _storage._fee ?? TW_Cosmos_Proto_Fee()}
    set {_uniqueStorage()._fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return _storage._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {_uniqueStorage()._fee = nil}

  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  public var signature: TW_Cosmos_Proto_Signature {
    get {return _storage._signature ?? TW_Cosmos_Proto_Signature()}
    set {_uniqueStorage()._signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return _storage._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {_uniqueStorage()._signature = nil}

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var sendCoinsMessage: TW_Cosmos_Proto_SendCoinsMessage {
    get {
      if case .sendCoinsMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_SendCoinsMessage()
    }
    set {_uniqueStorage()._messageOneof = .sendCoinsMessage(newValue)}
  }

  public var stakeMessage: TW_Cosmos_Proto_StakeMessage {
    get {
      if case .stakeMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_StakeMessage()
    }
    set {_uniqueStorage()._messageOneof = .stakeMessage(newValue)}
  }

  public var unstakeMessage: TW_Cosmos_Proto_StakeMessage {
    get {
      if case .unstakeMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_StakeMessage()
    }
    set {_uniqueStorage()._messageOneof = .unstakeMessage(newValue)}
  }

  public var withdrawStakeRewardMessage: TW_Cosmos_Proto_WithdrawStakeRewardMessage {
    get {
      if case .withdrawStakeRewardMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_WithdrawStakeRewardMessage()
    }
    set {_uniqueStorage()._messageOneof = .withdrawStakeRewardMessage(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case sendCoinsMessage(TW_Cosmos_Proto_SendCoinsMessage)
    case stakeMessage(TW_Cosmos_Proto_StakeMessage)
    case unstakeMessage(TW_Cosmos_Proto_StakeMessage)
    case withdrawStakeRewardMessage(TW_Cosmos_Proto_WithdrawStakeRewardMessage)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Cosmos_Proto_Transaction.OneOf_MessageOneof, rhs: TW_Cosmos_Proto_Transaction.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.sendCoinsMessage(let l), .sendCoinsMessage(let r)): return l == r
      case (.stakeMessage(let l), .stakeMessage(let r)): return l == r
      case (.unstakeMessage(let l), .unstakeMessage(let r)): return l == r
      case (.withdrawStakeRewardMessage(let l), .withdrawStakeRewardMessage(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Input data necessary to create a signed order.
public struct TW_Cosmos_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountNumber: UInt64 {
    get {return _storage._accountNumber}
    set {_uniqueStorage()._accountNumber = newValue}
  }

  public var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  public var fee: TW_Cosmos_Proto_Fee {
    get {return _storage._fee ?? TW_Cosmos_Proto_Fee()}
    set {_uniqueStorage()._fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return _storage._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {_uniqueStorage()._fee = nil}

  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  public var sequence: UInt64 {
    get {return _storage._sequence}
    set {_uniqueStorage()._sequence = newValue}
  }

  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var sendCoinsMessage: TW_Cosmos_Proto_SendCoinsMessage {
    get {
      if case .sendCoinsMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_SendCoinsMessage()
    }
    set {_uniqueStorage()._messageOneof = .sendCoinsMessage(newValue)}
  }

  public var stakeMessage: TW_Cosmos_Proto_StakeMessage {
    get {
      if case .stakeMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_StakeMessage()
    }
    set {_uniqueStorage()._messageOneof = .stakeMessage(newValue)}
  }

  public var unstakeMessage: TW_Cosmos_Proto_StakeMessage {
    get {
      if case .unstakeMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_StakeMessage()
    }
    set {_uniqueStorage()._messageOneof = .unstakeMessage(newValue)}
  }

  public var withdrawStakeRewardMessage: TW_Cosmos_Proto_WithdrawStakeRewardMessage {
    get {
      if case .withdrawStakeRewardMessage(let v)? = _storage._messageOneof {return v}
      return TW_Cosmos_Proto_WithdrawStakeRewardMessage()
    }
    set {_uniqueStorage()._messageOneof = .withdrawStakeRewardMessage(newValue)}
  }

  /// default is cosmos-sdk/MsgSend
  public var typePrefix: String {
    get {return _storage._typePrefix}
    set {_uniqueStorage()._typePrefix = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case sendCoinsMessage(TW_Cosmos_Proto_SendCoinsMessage)
    case stakeMessage(TW_Cosmos_Proto_StakeMessage)
    case unstakeMessage(TW_Cosmos_Proto_StakeMessage)
    case withdrawStakeRewardMessage(TW_Cosmos_Proto_WithdrawStakeRewardMessage)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Cosmos_Proto_SigningInput.OneOf_MessageOneof, rhs: TW_Cosmos_Proto_SigningInput.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.sendCoinsMessage(let l), .sendCoinsMessage(let r)): return l == r
      case (.stakeMessage(let l), .stakeMessage(let r)): return l == r
      case (.unstakeMessage(let l), .unstakeMessage(let r)): return l == r
      case (.withdrawStakeRewardMessage(let l), .withdrawStakeRewardMessage(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_Cosmos_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature
  public var signature: Data = SwiftProtobuf.Internal.emptyData

  /// Signed transaction in JSON.
  public var json: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Cosmos.Proto"

extension TW_Cosmos_Proto_Amount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.denom)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Amount, rhs: TW_Cosmos_Proto_Amount) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amounts"),
    2: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.amounts)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.gas)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 1)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Fee, rhs: TW_Cosmos_Proto_Fee) -> Bool {
    if lhs.amounts != rhs.amounts {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SendCoinsMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendCoinsMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amounts"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fromAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.amounts)
      case 4: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 3)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SendCoinsMessage, rhs: TW_Cosmos_Proto_SendCoinsMessage) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_StakeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StakeMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "type_prefix"),
  ]

  fileprivate class _StorageClass {
    var _delegatorAddress: String = String()
    var _validatorAddress: String = String()
    var _amount: TW_Cosmos_Proto_Amount? = nil
    var _typePrefix: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _delegatorAddress = source._delegatorAddress
      _validatorAddress = source._validatorAddress
      _amount = source._amount
      _typePrefix = source._typePrefix
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._delegatorAddress)
        case 2: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._typePrefix)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._delegatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorAddress, fieldNumber: 1)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._typePrefix.isEmpty {
        try visitor.visitSingularStringField(value: _storage._typePrefix, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_StakeMessage, rhs: TW_Cosmos_Proto_StakeMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._delegatorAddress != rhs_storage._delegatorAddress {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._typePrefix != rhs_storage._typePrefix {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_WithdrawStakeRewardMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WithdrawStakeRewardMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_WithdrawStakeRewardMessage, rhs: TW_Cosmos_Proto_WithdrawStakeRewardMessage) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Signature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.publicKey)
      case 2: try decoder.decodeSingularBytesField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Signature, rhs: TW_Cosmos_Proto_Signature) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fee"),
    2: .same(proto: "memo"),
    3: .same(proto: "signature"),
    4: .standard(proto: "send_coins_message"),
    5: .standard(proto: "stake_message"),
    6: .standard(proto: "unstake_message"),
    7: .standard(proto: "withdraw_stake_reward_message"),
  ]

  fileprivate class _StorageClass {
    var _fee: TW_Cosmos_Proto_Fee? = nil
    var _memo: String = String()
    var _signature: TW_Cosmos_Proto_Signature? = nil
    var _messageOneof: TW_Cosmos_Proto_Transaction.OneOf_MessageOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _fee = source._fee
      _memo = source._memo
      _signature = source._signature
      _messageOneof = source._messageOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._fee)
        case 2: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._signature)
        case 4:
          var v: TW_Cosmos_Proto_SendCoinsMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .sendCoinsMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .sendCoinsMessage(v)}
        case 5:
          var v: TW_Cosmos_Proto_StakeMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .stakeMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .stakeMessage(v)}
        case 6:
          var v: TW_Cosmos_Proto_StakeMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .unstakeMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .unstakeMessage(v)}
        case 7:
          var v: TW_Cosmos_Proto_WithdrawStakeRewardMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .withdrawStakeRewardMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .withdrawStakeRewardMessage(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._fee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 2)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      switch _storage._messageOneof {
      case .sendCoinsMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .stakeMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .unstakeMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .withdrawStakeRewardMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Transaction, rhs: TW_Cosmos_Proto_Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._signature != rhs_storage._signature {return false}
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_number"),
    2: .standard(proto: "chain_id"),
    3: .same(proto: "fee"),
    4: .same(proto: "memo"),
    5: .same(proto: "sequence"),
    6: .standard(proto: "private_key"),
    7: .standard(proto: "send_coins_message"),
    8: .standard(proto: "stake_message"),
    9: .standard(proto: "unstake_message"),
    10: .standard(proto: "withdraw_stake_reward_message"),
    11: .standard(proto: "type_prefix"),
  ]

  fileprivate class _StorageClass {
    var _accountNumber: UInt64 = 0
    var _chainID: String = String()
    var _fee: TW_Cosmos_Proto_Fee? = nil
    var _memo: String = String()
    var _sequence: UInt64 = 0
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _messageOneof: TW_Cosmos_Proto_SigningInput.OneOf_MessageOneof?
    var _typePrefix: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountNumber = source._accountNumber
      _chainID = source._chainID
      _fee = source._fee
      _memo = source._memo
      _sequence = source._sequence
      _privateKey = source._privateKey
      _messageOneof = source._messageOneof
      _typePrefix = source._typePrefix
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._accountNumber)
        case 2: try decoder.decodeSingularStringField(value: &_storage._chainID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._fee)
        case 4: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 5: try decoder.decodeSingularUInt64Field(value: &_storage._sequence)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 7:
          var v: TW_Cosmos_Proto_SendCoinsMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .sendCoinsMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .sendCoinsMessage(v)}
        case 8:
          var v: TW_Cosmos_Proto_StakeMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .stakeMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .stakeMessage(v)}
        case 9:
          var v: TW_Cosmos_Proto_StakeMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .unstakeMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .unstakeMessage(v)}
        case 10:
          var v: TW_Cosmos_Proto_WithdrawStakeRewardMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .withdrawStakeRewardMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .withdrawStakeRewardMessage(v)}
        case 11: try decoder.decodeSingularStringField(value: &_storage._typePrefix)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._accountNumber != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._accountNumber, fieldNumber: 1)
      }
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 2)
      }
      if let v = _storage._fee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 4)
      }
      if _storage._sequence != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._sequence, fieldNumber: 5)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 6)
      }
      switch _storage._messageOneof {
      case .sendCoinsMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .stakeMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .unstakeMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .withdrawStakeRewardMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case nil: break
      }
      if !_storage._typePrefix.isEmpty {
        try visitor.visitSingularStringField(value: _storage._typePrefix, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SigningInput, rhs: TW_Cosmos_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountNumber != rhs_storage._accountNumber {return false}
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        if _storage._typePrefix != rhs_storage._typePrefix {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "json"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.signature)
      case 2: try decoder.decodeSingularStringField(value: &self.json)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SigningOutput, rhs: TW_Cosmos_Proto_SigningOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.json != rhs.json {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
