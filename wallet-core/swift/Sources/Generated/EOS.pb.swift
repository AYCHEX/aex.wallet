// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: EOS.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum TW_EOS_Proto_KeyType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case legacy // = 0
  case modernk1 // = 1
  case modernr1 // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .legacy
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .legacy
    case 1: self = .modernk1
    case 2: self = .modernr1
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .legacy: return 0
    case .modernk1: return 1
    case .modernr1: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_EOS_Proto_KeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_EOS_Proto_KeyType] = [
    .legacy,
    .modernk1,
    .modernr1,
  ]
}

#endif  // swift(>=4.2)

/// Values for an Asset object.
public struct TW_EOS_Proto_Asset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amount: Int64 = 0

  public var decimals: UInt32 = 0

  public var symbol: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_EOS_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Chain id (256-bit number)
  public var chainID: Data {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  /// Reference Block Id (256-bits)
  public var referenceBlockID: Data {
    get {return _storage._referenceBlockID}
    set {_uniqueStorage()._referenceBlockID = newValue}
  }

  /// Timestamp on the reference block
  public var referenceBlockTime: Int32 {
    get {return _storage._referenceBlockTime}
    set {_uniqueStorage()._referenceBlockTime = newValue}
  }

  /// Currency (e.g. "eosio.token")
  public var currency: String {
    get {return _storage._currency}
    set {_uniqueStorage()._currency = newValue}
  }

  /// Sender's username
  public var sender: String {
    get {return _storage._sender}
    set {_uniqueStorage()._sender = newValue}
  }

  /// Recipient's username
  public var recipient: String {
    get {return _storage._recipient}
    set {_uniqueStorage()._recipient = newValue}
  }

  /// Memo attached to the transaction
  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  /// Asset details and amount
  public var asset: TW_EOS_Proto_Asset {
    get {return _storage._asset ?? TW_EOS_Proto_Asset()}
    set {_uniqueStorage()._asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  public var hasAsset: Bool {return _storage._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  public mutating func clearAsset() {_uniqueStorage()._asset = nil}

  /// Sender's private key's raw bytes
  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  /// Type of the private key
  public var privateKeyType: TW_EOS_Proto_KeyType {
    get {return _storage._privateKeyType}
    set {_uniqueStorage()._privateKeyType = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_EOS_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// JSON of the packed transaction.
  public var jsonEncoded: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.EOS.Proto"

extension TW_EOS_Proto_KeyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEGACY"),
    1: .same(proto: "MODERNK1"),
    2: .same(proto: "MODERNR1"),
  ]
}

extension TW_EOS_Proto_Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Asset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "decimals"),
    3: .same(proto: "symbol"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.amount)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.decimals)
      case 3: try decoder.decodeSingularStringField(value: &self.symbol)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 1)
    }
    if self.decimals != 0 {
      try visitor.visitSingularUInt32Field(value: self.decimals, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_EOS_Proto_Asset, rhs: TW_EOS_Proto_Asset) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_EOS_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "reference_block_id"),
    3: .standard(proto: "reference_block_time"),
    4: .same(proto: "currency"),
    5: .same(proto: "sender"),
    6: .same(proto: "recipient"),
    7: .same(proto: "memo"),
    8: .same(proto: "asset"),
    9: .standard(proto: "private_key"),
    10: .standard(proto: "private_key_type"),
  ]

  fileprivate class _StorageClass {
    var _chainID: Data = SwiftProtobuf.Internal.emptyData
    var _referenceBlockID: Data = SwiftProtobuf.Internal.emptyData
    var _referenceBlockTime: Int32 = 0
    var _currency: String = String()
    var _sender: String = String()
    var _recipient: String = String()
    var _memo: String = String()
    var _asset: TW_EOS_Proto_Asset? = nil
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _privateKeyType: TW_EOS_Proto_KeyType = .legacy

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _referenceBlockID = source._referenceBlockID
      _referenceBlockTime = source._referenceBlockTime
      _currency = source._currency
      _sender = source._sender
      _recipient = source._recipient
      _memo = source._memo
      _asset = source._asset
      _privateKey = source._privateKey
      _privateKeyType = source._privateKeyType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._chainID)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._referenceBlockID)
        case 3: try decoder.decodeSingularSFixed32Field(value: &_storage._referenceBlockTime)
        case 4: try decoder.decodeSingularStringField(value: &_storage._currency)
        case 5: try decoder.decodeSingularStringField(value: &_storage._sender)
        case 6: try decoder.decodeSingularStringField(value: &_storage._recipient)
        case 7: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._asset)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._privateKeyType)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._referenceBlockID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._referenceBlockID, fieldNumber: 2)
      }
      if _storage._referenceBlockTime != 0 {
        try visitor.visitSingularSFixed32Field(value: _storage._referenceBlockTime, fieldNumber: 3)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 4)
      }
      if !_storage._sender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sender, fieldNumber: 5)
      }
      if !_storage._recipient.isEmpty {
        try visitor.visitSingularStringField(value: _storage._recipient, fieldNumber: 6)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 7)
      }
      if let v = _storage._asset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 9)
      }
      if _storage._privateKeyType != .legacy {
        try visitor.visitSingularEnumField(value: _storage._privateKeyType, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_EOS_Proto_SigningInput, rhs: TW_EOS_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._referenceBlockID != rhs_storage._referenceBlockID {return false}
        if _storage._referenceBlockTime != rhs_storage._referenceBlockTime {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._sender != rhs_storage._sender {return false}
        if _storage._recipient != rhs_storage._recipient {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._asset != rhs_storage._asset {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._privateKeyType != rhs_storage._privateKeyType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_EOS_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "json_encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jsonEncoded)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jsonEncoded.isEmpty {
      try visitor.visitSingularStringField(value: self.jsonEncoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_EOS_Proto_SigningOutput, rhs: TW_EOS_Proto_SigningOutput) -> Bool {
    if lhs.jsonEncoded != rhs.jsonEncoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
