// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Harmony.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Input data necessary to create a signed transaction.
public struct TW_Harmony_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Chain identifier (256-bit number)
  public var chainID: Data {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  /// Private key.
  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var transactionMessage: TW_Harmony_Proto_TransactionMessage {
    get {
      if case .transactionMessage(let v)? = _storage._messageOneof {return v}
      return TW_Harmony_Proto_TransactionMessage()
    }
    set {_uniqueStorage()._messageOneof = .transactionMessage(newValue)}
  }

  public var stakingMessage: TW_Harmony_Proto_StakingMessage {
    get {
      if case .stakingMessage(let v)? = _storage._messageOneof {return v}
      return TW_Harmony_Proto_StakingMessage()
    }
    set {_uniqueStorage()._messageOneof = .stakingMessage(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case transactionMessage(TW_Harmony_Proto_TransactionMessage)
    case stakingMessage(TW_Harmony_Proto_StakingMessage)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Harmony_Proto_SigningInput.OneOf_MessageOneof, rhs: TW_Harmony_Proto_SigningInput.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.transactionMessage(let l), .transactionMessage(let r)): return l == r
      case (.stakingMessage(let l), .stakingMessage(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_Harmony_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var v: Data = SwiftProtobuf.Internal.emptyData

  public var r: Data = SwiftProtobuf.Internal.emptyData

  public var s: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Harmony_Proto_TransactionMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Nonce (256-bit number)
  public var nonce: Data = SwiftProtobuf.Internal.emptyData

  /// Gas price (256-bit number)
  public var gasPrice: Data = SwiftProtobuf.Internal.emptyData

  /// Gas limit (256-bit number)
  public var gasLimit: Data = SwiftProtobuf.Internal.emptyData

  /// Recipient's address.
  public var toAddress: String = String()

  /// Amount to send in wei (256-bit number)
  public var amount: Data = SwiftProtobuf.Internal.emptyData

  /// Optional payload
  public var payload: Data = SwiftProtobuf.Internal.emptyData

  /// From shard ID (256-bit number)
  public var fromShardID: Data = SwiftProtobuf.Internal.emptyData

  /// To Shard ID (256-bit number)
  public var toShardID: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Harmony_Proto_StakingMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// StakeMsg 
  public var stakeMsg: OneOf_StakeMsg? {
    get {return _storage._stakeMsg}
    set {_uniqueStorage()._stakeMsg = newValue}
  }

  public var createValidatorMessage: TW_Harmony_Proto_DirectiveCreateValidator {
    get {
      if case .createValidatorMessage(let v)? = _storage._stakeMsg {return v}
      return TW_Harmony_Proto_DirectiveCreateValidator()
    }
    set {_uniqueStorage()._stakeMsg = .createValidatorMessage(newValue)}
  }

  public var editValidatorMessage: TW_Harmony_Proto_DirectiveEditValidator {
    get {
      if case .editValidatorMessage(let v)? = _storage._stakeMsg {return v}
      return TW_Harmony_Proto_DirectiveEditValidator()
    }
    set {_uniqueStorage()._stakeMsg = .editValidatorMessage(newValue)}
  }

  public var delegateMessage: TW_Harmony_Proto_DirectiveDelegate {
    get {
      if case .delegateMessage(let v)? = _storage._stakeMsg {return v}
      return TW_Harmony_Proto_DirectiveDelegate()
    }
    set {_uniqueStorage()._stakeMsg = .delegateMessage(newValue)}
  }

  public var undelegateMessage: TW_Harmony_Proto_DirectiveUndelegate {
    get {
      if case .undelegateMessage(let v)? = _storage._stakeMsg {return v}
      return TW_Harmony_Proto_DirectiveUndelegate()
    }
    set {_uniqueStorage()._stakeMsg = .undelegateMessage(newValue)}
  }

  public var collectRewards: TW_Harmony_Proto_DirectiveCollectRewards {
    get {
      if case .collectRewards(let v)? = _storage._stakeMsg {return v}
      return TW_Harmony_Proto_DirectiveCollectRewards()
    }
    set {_uniqueStorage()._stakeMsg = .collectRewards(newValue)}
  }

  /// Nonce (256-bit number)
  public var nonce: Data {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  /// Gas price (256-bit number)
  public var gasPrice: Data {
    get {return _storage._gasPrice}
    set {_uniqueStorage()._gasPrice = newValue}
  }

  /// Gas limit (256-bit number)
  public var gasLimit: Data {
    get {return _storage._gasLimit}
    set {_uniqueStorage()._gasLimit = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// StakeMsg 
  public enum OneOf_StakeMsg: Equatable {
    case createValidatorMessage(TW_Harmony_Proto_DirectiveCreateValidator)
    case editValidatorMessage(TW_Harmony_Proto_DirectiveEditValidator)
    case delegateMessage(TW_Harmony_Proto_DirectiveDelegate)
    case undelegateMessage(TW_Harmony_Proto_DirectiveUndelegate)
    case collectRewards(TW_Harmony_Proto_DirectiveCollectRewards)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg, rhs: TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg) -> Bool {
      switch (lhs, rhs) {
      case (.createValidatorMessage(let l), .createValidatorMessage(let r)): return l == r
      case (.editValidatorMessage(let l), .editValidatorMessage(let r)): return l == r
      case (.delegateMessage(let l), .delegateMessage(let r)): return l == r
      case (.undelegateMessage(let l), .undelegateMessage(let r)): return l == r
      case (.collectRewards(let l), .collectRewards(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct TW_Harmony_Proto_Description {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var identity: String = String()

  public var website: String = String()

  public var securityContact: String = String()

  public var details: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Harmony_Proto_Decimal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: Data = SwiftProtobuf.Internal.emptyData

  public var precision: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Harmony_Proto_CommissionRate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rate: TW_Harmony_Proto_Decimal {
    get {return _storage._rate ?? TW_Harmony_Proto_Decimal()}
    set {_uniqueStorage()._rate = newValue}
  }
  /// Returns true if `rate` has been explicitly set.
  public var hasRate: Bool {return _storage._rate != nil}
  /// Clears the value of `rate`. Subsequent reads from it will return its default value.
  public mutating func clearRate() {_uniqueStorage()._rate = nil}

  public var maxRate: TW_Harmony_Proto_Decimal {
    get {return _storage._maxRate ?? TW_Harmony_Proto_Decimal()}
    set {_uniqueStorage()._maxRate = newValue}
  }
  /// Returns true if `maxRate` has been explicitly set.
  public var hasMaxRate: Bool {return _storage._maxRate != nil}
  /// Clears the value of `maxRate`. Subsequent reads from it will return its default value.
  public mutating func clearMaxRate() {_uniqueStorage()._maxRate = nil}

  public var maxChangeRate: TW_Harmony_Proto_Decimal {
    get {return _storage._maxChangeRate ?? TW_Harmony_Proto_Decimal()}
    set {_uniqueStorage()._maxChangeRate = newValue}
  }
  /// Returns true if `maxChangeRate` has been explicitly set.
  public var hasMaxChangeRate: Bool {return _storage._maxChangeRate != nil}
  /// Clears the value of `maxChangeRate`. Subsequent reads from it will return its default value.
  public mutating func clearMaxChangeRate() {_uniqueStorage()._maxChangeRate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct TW_Harmony_Proto_DirectiveCreateValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  public var description_p: TW_Harmony_Proto_Description {
    get {return _storage._description_p ?? TW_Harmony_Proto_Description()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var commissionRates: TW_Harmony_Proto_CommissionRate {
    get {return _storage._commissionRates ?? TW_Harmony_Proto_CommissionRate()}
    set {_uniqueStorage()._commissionRates = newValue}
  }
  /// Returns true if `commissionRates` has been explicitly set.
  public var hasCommissionRates: Bool {return _storage._commissionRates != nil}
  /// Clears the value of `commissionRates`. Subsequent reads from it will return its default value.
  public mutating func clearCommissionRates() {_uniqueStorage()._commissionRates = nil}

  public var minSelfDelegation: Data {
    get {return _storage._minSelfDelegation}
    set {_uniqueStorage()._minSelfDelegation = newValue}
  }

  public var maxTotalDelegation: Data {
    get {return _storage._maxTotalDelegation}
    set {_uniqueStorage()._maxTotalDelegation = newValue}
  }

  public var slotPubKeys: [Data] {
    get {return _storage._slotPubKeys}
    set {_uniqueStorage()._slotPubKeys = newValue}
  }

  public var amount: Data {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct TW_Harmony_Proto_DirectiveEditValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  public var description_p: TW_Harmony_Proto_Description {
    get {return _storage._description_p ?? TW_Harmony_Proto_Description()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var commissionRate: TW_Harmony_Proto_Decimal {
    get {return _storage._commissionRate ?? TW_Harmony_Proto_Decimal()}
    set {_uniqueStorage()._commissionRate = newValue}
  }
  /// Returns true if `commissionRate` has been explicitly set.
  public var hasCommissionRate: Bool {return _storage._commissionRate != nil}
  /// Clears the value of `commissionRate`. Subsequent reads from it will return its default value.
  public mutating func clearCommissionRate() {_uniqueStorage()._commissionRate = nil}

  public var minSelfDelegation: Data {
    get {return _storage._minSelfDelegation}
    set {_uniqueStorage()._minSelfDelegation = newValue}
  }

  public var maxTotalDelegation: Data {
    get {return _storage._maxTotalDelegation}
    set {_uniqueStorage()._maxTotalDelegation = newValue}
  }

  public var slotKeyToRemove: Data {
    get {return _storage._slotKeyToRemove}
    set {_uniqueStorage()._slotKeyToRemove = newValue}
  }

  public var slotKeyToAdd: Data {
    get {return _storage._slotKeyToAdd}
    set {_uniqueStorage()._slotKeyToAdd = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct TW_Harmony_Proto_DirectiveDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddress: String = String()

  public var validatorAddress: String = String()

  public var amount: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Harmony_Proto_DirectiveUndelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddress: String = String()

  public var validatorAddress: String = String()

  public var amount: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Harmony_Proto_DirectiveCollectRewards {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var delegatorAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Harmony.Proto"

extension TW_Harmony_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .standard(proto: "private_key"),
    3: .standard(proto: "transaction_message"),
    4: .standard(proto: "staking_message"),
  ]

  fileprivate class _StorageClass {
    var _chainID: Data = SwiftProtobuf.Internal.emptyData
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _messageOneof: TW_Harmony_Proto_SigningInput.OneOf_MessageOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _privateKey = source._privateKey
      _messageOneof = source._messageOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._chainID)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 3:
          var v: TW_Harmony_Proto_TransactionMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .transactionMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .transactionMessage(v)}
        case 4:
          var v: TW_Harmony_Proto_StakingMessage?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .stakingMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .stakingMessage(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._chainID, fieldNumber: 1)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 2)
      }
      switch _storage._messageOneof {
      case .transactionMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .stakingMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_SigningInput, rhs: TW_Harmony_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
    2: .same(proto: "v"),
    3: .same(proto: "r"),
    4: .same(proto: "s"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.encoded)
      case 2: try decoder.decodeSingularBytesField(value: &self.v)
      case 3: try decoder.decodeSingularBytesField(value: &self.r)
      case 4: try decoder.decodeSingularBytesField(value: &self.s)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    if !self.v.isEmpty {
      try visitor.visitSingularBytesField(value: self.v, fieldNumber: 2)
    }
    if !self.r.isEmpty {
      try visitor.visitSingularBytesField(value: self.r, fieldNumber: 3)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularBytesField(value: self.s, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_SigningOutput, rhs: TW_Harmony_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.v != rhs.v {return false}
    if lhs.r != rhs.r {return false}
    if lhs.s != rhs.s {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_TransactionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
    2: .standard(proto: "gas_price"),
    3: .standard(proto: "gas_limit"),
    4: .standard(proto: "to_address"),
    5: .same(proto: "amount"),
    6: .same(proto: "payload"),
    7: .standard(proto: "from_shard_id"),
    8: .standard(proto: "to_shard_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.nonce)
      case 2: try decoder.decodeSingularBytesField(value: &self.gasPrice)
      case 3: try decoder.decodeSingularBytesField(value: &self.gasLimit)
      case 4: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 5: try decoder.decodeSingularBytesField(value: &self.amount)
      case 6: try decoder.decodeSingularBytesField(value: &self.payload)
      case 7: try decoder.decodeSingularBytesField(value: &self.fromShardID)
      case 8: try decoder.decodeSingularBytesField(value: &self.toShardID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce, fieldNumber: 1)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularBytesField(value: self.gasPrice, fieldNumber: 2)
    }
    if !self.gasLimit.isEmpty {
      try visitor.visitSingularBytesField(value: self.gasLimit, fieldNumber: 3)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 4)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 5)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 6)
    }
    if !self.fromShardID.isEmpty {
      try visitor.visitSingularBytesField(value: self.fromShardID, fieldNumber: 7)
    }
    if !self.toShardID.isEmpty {
      try visitor.visitSingularBytesField(value: self.toShardID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_TransactionMessage, rhs: TW_Harmony_Proto_TransactionMessage) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.gasLimit != rhs.gasLimit {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.fromShardID != rhs.fromShardID {return false}
    if lhs.toShardID != rhs.toShardID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_StakingMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StakingMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "create_validator_message"),
    2: .standard(proto: "edit_validator_message"),
    3: .standard(proto: "delegate_message"),
    4: .standard(proto: "undelegate_message"),
    5: .standard(proto: "collect_rewards"),
    6: .same(proto: "nonce"),
    7: .standard(proto: "gas_price"),
    8: .standard(proto: "gas_limit"),
  ]

  fileprivate class _StorageClass {
    var _stakeMsg: TW_Harmony_Proto_StakingMessage.OneOf_StakeMsg?
    var _nonce: Data = SwiftProtobuf.Internal.emptyData
    var _gasPrice: Data = SwiftProtobuf.Internal.emptyData
    var _gasLimit: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stakeMsg = source._stakeMsg
      _nonce = source._nonce
      _gasPrice = source._gasPrice
      _gasLimit = source._gasLimit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: TW_Harmony_Proto_DirectiveCreateValidator?
          if let current = _storage._stakeMsg {
            try decoder.handleConflictingOneOf()
            if case .createValidatorMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stakeMsg = .createValidatorMessage(v)}
        case 2:
          var v: TW_Harmony_Proto_DirectiveEditValidator?
          if let current = _storage._stakeMsg {
            try decoder.handleConflictingOneOf()
            if case .editValidatorMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stakeMsg = .editValidatorMessage(v)}
        case 3:
          var v: TW_Harmony_Proto_DirectiveDelegate?
          if let current = _storage._stakeMsg {
            try decoder.handleConflictingOneOf()
            if case .delegateMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stakeMsg = .delegateMessage(v)}
        case 4:
          var v: TW_Harmony_Proto_DirectiveUndelegate?
          if let current = _storage._stakeMsg {
            try decoder.handleConflictingOneOf()
            if case .undelegateMessage(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stakeMsg = .undelegateMessage(v)}
        case 5:
          var v: TW_Harmony_Proto_DirectiveCollectRewards?
          if let current = _storage._stakeMsg {
            try decoder.handleConflictingOneOf()
            if case .collectRewards(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stakeMsg = .collectRewards(v)}
        case 6: try decoder.decodeSingularBytesField(value: &_storage._nonce)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._gasPrice)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._gasLimit)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._stakeMsg {
      case .createValidatorMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .editValidatorMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .delegateMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .undelegateMessage(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .collectRewards(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
      if !_storage._nonce.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nonce, fieldNumber: 6)
      }
      if !_storage._gasPrice.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._gasPrice, fieldNumber: 7)
      }
      if !_storage._gasLimit.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._gasLimit, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_StakingMessage, rhs: TW_Harmony_Proto_StakingMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stakeMsg != rhs_storage._stakeMsg {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._gasPrice != rhs_storage._gasPrice {return false}
        if _storage._gasLimit != rhs_storage._gasLimit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Description"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "identity"),
    3: .same(proto: "website"),
    4: .standard(proto: "security_contact"),
    5: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.identity)
      case 3: try decoder.decodeSingularStringField(value: &self.website)
      case 4: try decoder.decodeSingularStringField(value: &self.securityContact)
      case 5: try decoder.decodeSingularStringField(value: &self.details)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 2)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 3)
    }
    if !self.securityContact.isEmpty {
      try visitor.visitSingularStringField(value: self.securityContact, fieldNumber: 4)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_Description, rhs: TW_Harmony_Proto_Description) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.website != rhs.website {return false}
    if lhs.securityContact != rhs.securityContact {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_Decimal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Decimal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "precision"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.value)
      case 2: try decoder.decodeSingularBytesField(value: &self.precision)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    if !self.precision.isEmpty {
      try visitor.visitSingularBytesField(value: self.precision, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_Decimal, rhs: TW_Harmony_Proto_Decimal) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.precision != rhs.precision {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_CommissionRate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommissionRate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rate"),
    2: .standard(proto: "max_rate"),
    3: .standard(proto: "max_change_rate"),
  ]

  fileprivate class _StorageClass {
    var _rate: TW_Harmony_Proto_Decimal? = nil
    var _maxRate: TW_Harmony_Proto_Decimal? = nil
    var _maxChangeRate: TW_Harmony_Proto_Decimal? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rate = source._rate
      _maxRate = source._maxRate
      _maxChangeRate = source._maxChangeRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._rate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._maxRate)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxChangeRate)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._rate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._maxRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxChangeRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_CommissionRate, rhs: TW_Harmony_Proto_CommissionRate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rate != rhs_storage._rate {return false}
        if _storage._maxRate != rhs_storage._maxRate {return false}
        if _storage._maxChangeRate != rhs_storage._maxChangeRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_DirectiveCreateValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectiveCreateValidator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .same(proto: "description"),
    3: .standard(proto: "commission_rates"),
    4: .standard(proto: "min_self_delegation"),
    5: .standard(proto: "max_total_delegation"),
    6: .standard(proto: "slot_pub_keys"),
    7: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _validatorAddress: String = String()
    var _description_p: TW_Harmony_Proto_Description? = nil
    var _commissionRates: TW_Harmony_Proto_CommissionRate? = nil
    var _minSelfDelegation: Data = SwiftProtobuf.Internal.emptyData
    var _maxTotalDelegation: Data = SwiftProtobuf.Internal.emptyData
    var _slotPubKeys: [Data] = []
    var _amount: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _validatorAddress = source._validatorAddress
      _description_p = source._description_p
      _commissionRates = source._commissionRates
      _minSelfDelegation = source._minSelfDelegation
      _maxTotalDelegation = source._maxTotalDelegation
      _slotPubKeys = source._slotPubKeys
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._description_p)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._commissionRates)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._minSelfDelegation)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._maxTotalDelegation)
        case 6: try decoder.decodeRepeatedBytesField(value: &_storage._slotPubKeys)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 1)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._commissionRates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._minSelfDelegation.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._minSelfDelegation, fieldNumber: 4)
      }
      if !_storage._maxTotalDelegation.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._maxTotalDelegation, fieldNumber: 5)
      }
      if !_storage._slotPubKeys.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._slotPubKeys, fieldNumber: 6)
      }
      if !_storage._amount.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._amount, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_DirectiveCreateValidator, rhs: TW_Harmony_Proto_DirectiveCreateValidator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._commissionRates != rhs_storage._commissionRates {return false}
        if _storage._minSelfDelegation != rhs_storage._minSelfDelegation {return false}
        if _storage._maxTotalDelegation != rhs_storage._maxTotalDelegation {return false}
        if _storage._slotPubKeys != rhs_storage._slotPubKeys {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_DirectiveEditValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectiveEditValidator"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_address"),
    2: .same(proto: "description"),
    3: .standard(proto: "commission_rate"),
    4: .standard(proto: "min_self_delegation"),
    5: .standard(proto: "max_total_delegation"),
    6: .standard(proto: "slot_key_to_remove"),
    7: .standard(proto: "slot_key_to_add"),
  ]

  fileprivate class _StorageClass {
    var _validatorAddress: String = String()
    var _description_p: TW_Harmony_Proto_Description? = nil
    var _commissionRate: TW_Harmony_Proto_Decimal? = nil
    var _minSelfDelegation: Data = SwiftProtobuf.Internal.emptyData
    var _maxTotalDelegation: Data = SwiftProtobuf.Internal.emptyData
    var _slotKeyToRemove: Data = SwiftProtobuf.Internal.emptyData
    var _slotKeyToAdd: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _validatorAddress = source._validatorAddress
      _description_p = source._description_p
      _commissionRate = source._commissionRate
      _minSelfDelegation = source._minSelfDelegation
      _maxTotalDelegation = source._maxTotalDelegation
      _slotKeyToRemove = source._slotKeyToRemove
      _slotKeyToAdd = source._slotKeyToAdd
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._description_p)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._commissionRate)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._minSelfDelegation)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._maxTotalDelegation)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._slotKeyToRemove)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._slotKeyToAdd)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 1)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._commissionRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._minSelfDelegation.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._minSelfDelegation, fieldNumber: 4)
      }
      if !_storage._maxTotalDelegation.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._maxTotalDelegation, fieldNumber: 5)
      }
      if !_storage._slotKeyToRemove.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slotKeyToRemove, fieldNumber: 6)
      }
      if !_storage._slotKeyToAdd.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slotKeyToAdd, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_DirectiveEditValidator, rhs: TW_Harmony_Proto_DirectiveEditValidator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._commissionRate != rhs_storage._commissionRate {return false}
        if _storage._minSelfDelegation != rhs_storage._minSelfDelegation {return false}
        if _storage._maxTotalDelegation != rhs_storage._maxTotalDelegation {return false}
        if _storage._slotKeyToRemove != rhs_storage._slotKeyToRemove {return false}
        if _storage._slotKeyToAdd != rhs_storage._slotKeyToAdd {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_DirectiveDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectiveDelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorAddress)
      case 3: try decoder.decodeSingularBytesField(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_DirectiveDelegate, rhs: TW_Harmony_Proto_DirectiveDelegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_DirectiveUndelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectiveUndelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorAddress)
      case 3: try decoder.decodeSingularBytesField(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_DirectiveUndelegate, rhs: TW_Harmony_Proto_DirectiveUndelegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Harmony_Proto_DirectiveCollectRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectiveCollectRewards"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Harmony_Proto_DirectiveCollectRewards, rhs: TW_Harmony_Proto_DirectiveCollectRewards) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
