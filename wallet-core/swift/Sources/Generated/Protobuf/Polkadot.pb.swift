// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Polkadot.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Polkadot_Proto_ExtrinsicsTransfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var toAddress: String = String()

  public var value: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_Polkadot_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockHash: Data {
    get {return _storage._blockHash}
    set {_uniqueStorage()._blockHash = newValue}
  }

  public var genesisHash: Data {
    get {return _storage._genesisHash}
    set {_uniqueStorage()._genesisHash = newValue}
  }

  public var method: Data {
    get {return _storage._method}
    set {_uniqueStorage()._method = newValue}
  }

  public var nonce: UInt32 {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  public var specVersion: UInt32 {
    get {return _storage._specVersion}
    set {_uniqueStorage()._specVersion = newValue}
  }

  public var tip: Data {
    get {return _storage._tip}
    set {_uniqueStorage()._tip = newValue}
  }

  public var era: Data {
    get {return _storage._era}
    set {_uniqueStorage()._era = newValue}
  }

  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var messageOneof: OneOf_MessageOneof? {
    get {return _storage._messageOneof}
    set {_uniqueStorage()._messageOneof = newValue}
  }

  public var transfer: TW_Polkadot_Proto_ExtrinsicsTransfer {
    get {
      if case .transfer(let v)? = _storage._messageOneof {return v}
      return TW_Polkadot_Proto_ExtrinsicsTransfer()
    }
    set {_uniqueStorage()._messageOneof = .transfer(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case transfer(TW_Polkadot_Proto_ExtrinsicsTransfer)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof, rhs: TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.transfer(let l), .transfer(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_Polkadot_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Polkadot.Proto"

extension TW_Polkadot_Proto_ExtrinsicsTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExtrinsicsTransfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "to_address"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_ExtrinsicsTransfer, rhs: TW_Polkadot_Proto_ExtrinsicsTransfer) -> Bool {
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_hash"),
    2: .standard(proto: "genesis_hash"),
    3: .same(proto: "method"),
    4: .same(proto: "nonce"),
    5: .standard(proto: "spec_version"),
    6: .same(proto: "tip"),
    7: .same(proto: "era"),
    8: .standard(proto: "private_key"),
    10: .same(proto: "transfer"),
  ]

  fileprivate class _StorageClass {
    var _blockHash: Data = SwiftProtobuf.Internal.emptyData
    var _genesisHash: Data = SwiftProtobuf.Internal.emptyData
    var _method: Data = SwiftProtobuf.Internal.emptyData
    var _nonce: UInt32 = 0
    var _specVersion: UInt32 = 0
    var _tip: Data = SwiftProtobuf.Internal.emptyData
    var _era: Data = SwiftProtobuf.Internal.emptyData
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData
    var _messageOneof: TW_Polkadot_Proto_SigningInput.OneOf_MessageOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _blockHash = source._blockHash
      _genesisHash = source._genesisHash
      _method = source._method
      _nonce = source._nonce
      _specVersion = source._specVersion
      _tip = source._tip
      _era = source._era
      _privateKey = source._privateKey
      _messageOneof = source._messageOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._blockHash)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._genesisHash)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._method)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._nonce)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._specVersion)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._tip)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._era)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        case 10:
          var v: TW_Polkadot_Proto_ExtrinsicsTransfer?
          if let current = _storage._messageOneof {
            try decoder.handleConflictingOneOf()
            if case .transfer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._messageOneof = .transfer(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._blockHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._blockHash, fieldNumber: 1)
      }
      if !_storage._genesisHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._genesisHash, fieldNumber: 2)
      }
      if !_storage._method.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._method, fieldNumber: 3)
      }
      if _storage._nonce != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._nonce, fieldNumber: 4)
      }
      if _storage._specVersion != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._specVersion, fieldNumber: 5)
      }
      if !_storage._tip.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._tip, fieldNumber: 6)
      }
      if !_storage._era.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._era, fieldNumber: 7)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 8)
      }
      if case .transfer(let v)? = _storage._messageOneof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_SigningInput, rhs: TW_Polkadot_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._blockHash != rhs_storage._blockHash {return false}
        if _storage._genesisHash != rhs_storage._genesisHash {return false}
        if _storage._method != rhs_storage._method {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._specVersion != rhs_storage._specVersion {return false}
        if _storage._tip != rhs_storage._tip {return false}
        if _storage._era != rhs_storage._era {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._messageOneof != rhs_storage._messageOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Polkadot_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.encoded)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Polkadot_Proto_SigningOutput, rhs: TW_Polkadot_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
