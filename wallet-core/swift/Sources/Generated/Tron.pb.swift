// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Tron.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Tron_Proto_TransferContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address.
  public var ownerAddress: String = String()

  /// Recipient address.
  public var toAddress: String = String()

  /// Amount to send.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_TransferAssetContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Asset name.
  public var assetName: String = String()

  /// Sender address.
  public var ownerAddress: String = String()

  /// Recipient address.
  public var toAddress: String = String()

  /// Amount to send.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_TransferTRC20Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Contract name.
  public var contractAddress: String = String()

  /// Sender address.
  public var ownerAddress: String = String()

  /// Recipient address.
  public var toAddress: String = String()

  /// Amount to send.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_FreezeBalanceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address.
  public var ownerAddress: String = String()

  /// Frozen balance. Minimum 1
  public var frozenBalance: Int64 = 0

  /// Frozen duration
  public var frozenDuration: Int64 = 0

  /// Resource type: BANDWIDTH | ENERGY
  public var resource: String = String()

  /// Receiver address
  public var receiverAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_UnfreezeBalanceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  /// Resource type: BANDWIDTH | ENERGY
  public var resource: String = String()

  /// Receiver address
  public var receiverAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_UnfreezeAssetContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_VoteAssetContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  /// Vote addresses
  public var voteAddress: [String] = []

  public var support: Bool = false

  public var count: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_VoteWitnessContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ownerAddress: String = String()

  public var votes: [TW_Tron_Proto_VoteWitnessContract.Vote] = []

  public var support: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Vote {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var voteAddress: String = String()

    public var voteCount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct TW_Tron_Proto_WithdrawBalanceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_TriggerSmartContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ownerAddress: String = String()

  public var contractAddress: String = String()

  public var callValue: Int64 = 0

  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var callTokenValue: Int64 = 0

  public var tokenID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_BlockHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timestamp: Int64 = 0

  public var txTrieRoot: Data = SwiftProtobuf.Internal.emptyData

  public var parentHash: Data = SwiftProtobuf.Internal.emptyData

  public var number: Int64 = 0

  public var witnessAddress: Data = SwiftProtobuf.Internal.emptyData

  public var version: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Tron_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction timestamp in milliseconds.
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// Transaction expiration time in milliseconds.
  public var expiration: Int64 {
    get {return _storage._expiration}
    set {_uniqueStorage()._expiration = newValue}
  }

  /// Transaction block header.
  public var blockHeader: TW_Tron_Proto_BlockHeader {
    get {return _storage._blockHeader ?? TW_Tron_Proto_BlockHeader()}
    set {_uniqueStorage()._blockHeader = newValue}
  }
  /// Returns true if `blockHeader` has been explicitly set.
  public var hasBlockHeader: Bool {return _storage._blockHeader != nil}
  /// Clears the value of `blockHeader`. Subsequent reads from it will return its default value.
  public mutating func clearBlockHeader() {_uniqueStorage()._blockHeader = nil}

  /// Transaction fee limit
  public var feeLimit: Int64 {
    get {return _storage._feeLimit}
    set {_uniqueStorage()._feeLimit = newValue}
  }

  /// Contract.
  public var contractOneof: OneOf_ContractOneof? {
    get {return _storage._contractOneof}
    set {_uniqueStorage()._contractOneof = newValue}
  }

  public var transfer: TW_Tron_Proto_TransferContract {
    get {
      if case .transfer(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_TransferContract()
    }
    set {_uniqueStorage()._contractOneof = .transfer(newValue)}
  }

  public var transferAsset: TW_Tron_Proto_TransferAssetContract {
    get {
      if case .transferAsset(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_TransferAssetContract()
    }
    set {_uniqueStorage()._contractOneof = .transferAsset(newValue)}
  }

  public var freezeBalance: TW_Tron_Proto_FreezeBalanceContract {
    get {
      if case .freezeBalance(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_FreezeBalanceContract()
    }
    set {_uniqueStorage()._contractOneof = .freezeBalance(newValue)}
  }

  public var unfreezeBalance: TW_Tron_Proto_UnfreezeBalanceContract {
    get {
      if case .unfreezeBalance(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_UnfreezeBalanceContract()
    }
    set {_uniqueStorage()._contractOneof = .unfreezeBalance(newValue)}
  }

  public var unfreezeAsset: TW_Tron_Proto_UnfreezeAssetContract {
    get {
      if case .unfreezeAsset(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_UnfreezeAssetContract()
    }
    set {_uniqueStorage()._contractOneof = .unfreezeAsset(newValue)}
  }

  public var withdrawBalance: TW_Tron_Proto_WithdrawBalanceContract {
    get {
      if case .withdrawBalance(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_WithdrawBalanceContract()
    }
    set {_uniqueStorage()._contractOneof = .withdrawBalance(newValue)}
  }

  public var voteAsset: TW_Tron_Proto_VoteAssetContract {
    get {
      if case .voteAsset(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_VoteAssetContract()
    }
    set {_uniqueStorage()._contractOneof = .voteAsset(newValue)}
  }

  public var voteWitness: TW_Tron_Proto_VoteWitnessContract {
    get {
      if case .voteWitness(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_VoteWitnessContract()
    }
    set {_uniqueStorage()._contractOneof = .voteWitness(newValue)}
  }

  public var triggerSmartContract: TW_Tron_Proto_TriggerSmartContract {
    get {
      if case .triggerSmartContract(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_TriggerSmartContract()
    }
    set {_uniqueStorage()._contractOneof = .triggerSmartContract(newValue)}
  }

  public var transferTrc20Contract: TW_Tron_Proto_TransferTRC20Contract {
    get {
      if case .transferTrc20Contract(let v)? = _storage._contractOneof {return v}
      return TW_Tron_Proto_TransferTRC20Contract()
    }
    set {_uniqueStorage()._contractOneof = .transferTrc20Contract(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Contract.
  public enum OneOf_ContractOneof: Equatable {
    case transfer(TW_Tron_Proto_TransferContract)
    case transferAsset(TW_Tron_Proto_TransferAssetContract)
    case freezeBalance(TW_Tron_Proto_FreezeBalanceContract)
    case unfreezeBalance(TW_Tron_Proto_UnfreezeBalanceContract)
    case unfreezeAsset(TW_Tron_Proto_UnfreezeAssetContract)
    case withdrawBalance(TW_Tron_Proto_WithdrawBalanceContract)
    case voteAsset(TW_Tron_Proto_VoteAssetContract)
    case voteWitness(TW_Tron_Proto_VoteWitnessContract)
    case triggerSmartContract(TW_Tron_Proto_TriggerSmartContract)
    case transferTrc20Contract(TW_Tron_Proto_TransferTRC20Contract)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Tron_Proto_Transaction.OneOf_ContractOneof, rhs: TW_Tron_Proto_Transaction.OneOf_ContractOneof) -> Bool {
      switch (lhs, rhs) {
      case (.transfer(let l), .transfer(let r)): return l == r
      case (.transferAsset(let l), .transferAsset(let r)): return l == r
      case (.freezeBalance(let l), .freezeBalance(let r)): return l == r
      case (.unfreezeBalance(let l), .unfreezeBalance(let r)): return l == r
      case (.unfreezeAsset(let l), .unfreezeAsset(let r)): return l == r
      case (.withdrawBalance(let l), .withdrawBalance(let r)): return l == r
      case (.voteAsset(let l), .voteAsset(let r)): return l == r
      case (.voteWitness(let l), .voteWitness(let r)): return l == r
      case (.triggerSmartContract(let l), .triggerSmartContract(let r)): return l == r
      case (.transferTrc20Contract(let l), .transferTrc20Contract(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct TW_Tron_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction.
  public var transaction: TW_Tron_Proto_Transaction {
    get {return _storage._transaction ?? TW_Tron_Proto_Transaction()}
    set {_uniqueStorage()._transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  public var hasTransaction: Bool {return _storage._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  public mutating func clearTransaction() {_uniqueStorage()._transaction = nil}

  /// Private key.
  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Transaction signing output.
public struct TW_Tron_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction identifier.
  public var id: Data = SwiftProtobuf.Internal.emptyData

  /// Signature.
  public var signature: Data = SwiftProtobuf.Internal.emptyData

  public var refBlockBytes: Data = SwiftProtobuf.Internal.emptyData

  public var refBlockHash: Data = SwiftProtobuf.Internal.emptyData

  public var json: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Tron.Proto"

extension TW_Tron_Proto_TransferContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 3: try decoder.decodeSingularInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TransferContract, rhs: TW_Tron_Proto_TransferContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_TransferAssetContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferAssetContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_name"),
    2: .standard(proto: "owner_address"),
    3: .standard(proto: "to_address"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.assetName)
      case 2: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 4: try decoder.decodeSingularInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetName.isEmpty {
      try visitor.visitSingularStringField(value: self.assetName, fieldNumber: 1)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 2)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TransferAssetContract, rhs: TW_Tron_Proto_TransferAssetContract) -> Bool {
    if lhs.assetName != rhs.assetName {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_TransferTRC20Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferTRC20Contract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .standard(proto: "owner_address"),
    3: .standard(proto: "to_address"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.contractAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 4: try decoder.decodeSingularInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 2)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TransferTRC20Contract, rhs: TW_Tron_Proto_TransferTRC20Contract) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_FreezeBalanceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FreezeBalanceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "frozen_balance"),
    3: .standard(proto: "frozen_duration"),
    10: .same(proto: "resource"),
    15: .standard(proto: "receiver_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 2: try decoder.decodeSingularInt64Field(value: &self.frozenBalance)
      case 3: try decoder.decodeSingularInt64Field(value: &self.frozenDuration)
      case 10: try decoder.decodeSingularStringField(value: &self.resource)
      case 15: try decoder.decodeSingularStringField(value: &self.receiverAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if self.frozenBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.frozenBalance, fieldNumber: 2)
    }
    if self.frozenDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.frozenDuration, fieldNumber: 3)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 10)
    }
    if !self.receiverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverAddress, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_FreezeBalanceContract, rhs: TW_Tron_Proto_FreezeBalanceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.frozenBalance != rhs.frozenBalance {return false}
    if lhs.frozenDuration != rhs.frozenDuration {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.receiverAddress != rhs.receiverAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_UnfreezeBalanceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnfreezeBalanceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    10: .same(proto: "resource"),
    15: .standard(proto: "receiver_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 10: try decoder.decodeSingularStringField(value: &self.resource)
      case 15: try decoder.decodeSingularStringField(value: &self.receiverAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 10)
    }
    if !self.receiverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverAddress, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_UnfreezeBalanceContract, rhs: TW_Tron_Proto_UnfreezeBalanceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.receiverAddress != rhs.receiverAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_UnfreezeAssetContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnfreezeAssetContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_UnfreezeAssetContract, rhs: TW_Tron_Proto_UnfreezeAssetContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_VoteAssetContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoteAssetContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "vote_address"),
    3: .same(proto: "support"),
    5: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 2: try decoder.decodeRepeatedStringField(value: &self.voteAddress)
      case 3: try decoder.decodeSingularBoolField(value: &self.support)
      case 5: try decoder.decodeSingularInt32Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.voteAddress.isEmpty {
      try visitor.visitRepeatedStringField(value: self.voteAddress, fieldNumber: 2)
    }
    if self.support != false {
      try visitor.visitSingularBoolField(value: self.support, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_VoteAssetContract, rhs: TW_Tron_Proto_VoteAssetContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.voteAddress != rhs.voteAddress {return false}
    if lhs.support != rhs.support {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_VoteWitnessContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoteWitnessContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .same(proto: "votes"),
    3: .same(proto: "support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.votes)
      case 3: try decoder.decodeSingularBoolField(value: &self.support)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.votes, fieldNumber: 2)
    }
    if self.support != false {
      try visitor.visitSingularBoolField(value: self.support, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_VoteWitnessContract, rhs: TW_Tron_Proto_VoteWitnessContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.support != rhs.support {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_VoteWitnessContract.Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Tron_Proto_VoteWitnessContract.protoMessageName + ".Vote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vote_address"),
    2: .standard(proto: "vote_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.voteAddress)
      case 2: try decoder.decodeSingularInt64Field(value: &self.voteCount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.voteAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voteAddress, fieldNumber: 1)
    }
    if self.voteCount != 0 {
      try visitor.visitSingularInt64Field(value: self.voteCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_VoteWitnessContract.Vote, rhs: TW_Tron_Proto_VoteWitnessContract.Vote) -> Bool {
    if lhs.voteAddress != rhs.voteAddress {return false}
    if lhs.voteCount != rhs.voteCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_WithdrawBalanceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WithdrawBalanceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_WithdrawBalanceContract, rhs: TW_Tron_Proto_WithdrawBalanceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_TriggerSmartContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerSmartContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "contract_address"),
    3: .standard(proto: "call_value"),
    4: .same(proto: "data"),
    5: .standard(proto: "call_token_value"),
    6: .standard(proto: "token_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.contractAddress)
      case 3: try decoder.decodeSingularInt64Field(value: &self.callValue)
      case 4: try decoder.decodeSingularBytesField(value: &self.data)
      case 5: try decoder.decodeSingularInt64Field(value: &self.callTokenValue)
      case 6: try decoder.decodeSingularInt64Field(value: &self.tokenID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if self.callValue != 0 {
      try visitor.visitSingularInt64Field(value: self.callValue, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    if self.callTokenValue != 0 {
      try visitor.visitSingularInt64Field(value: self.callTokenValue, fieldNumber: 5)
    }
    if self.tokenID != 0 {
      try visitor.visitSingularInt64Field(value: self.tokenID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TriggerSmartContract, rhs: TW_Tron_Proto_TriggerSmartContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.callValue != rhs.callValue {return false}
    if lhs.data != rhs.data {return false}
    if lhs.callTokenValue != rhs.callTokenValue {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_BlockHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlockHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "tx_trie_root"),
    3: .standard(proto: "parent_hash"),
    7: .same(proto: "number"),
    9: .standard(proto: "witness_address"),
    10: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 2: try decoder.decodeSingularBytesField(value: &self.txTrieRoot)
      case 3: try decoder.decodeSingularBytesField(value: &self.parentHash)
      case 7: try decoder.decodeSingularInt64Field(value: &self.number)
      case 9: try decoder.decodeSingularBytesField(value: &self.witnessAddress)
      case 10: try decoder.decodeSingularInt32Field(value: &self.version)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.txTrieRoot.isEmpty {
      try visitor.visitSingularBytesField(value: self.txTrieRoot, fieldNumber: 2)
    }
    if !self.parentHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.parentHash, fieldNumber: 3)
    }
    if self.number != 0 {
      try visitor.visitSingularInt64Field(value: self.number, fieldNumber: 7)
    }
    if !self.witnessAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.witnessAddress, fieldNumber: 9)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_BlockHeader, rhs: TW_Tron_Proto_BlockHeader) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.txTrieRoot != rhs.txTrieRoot {return false}
    if lhs.parentHash != rhs.parentHash {return false}
    if lhs.number != rhs.number {return false}
    if lhs.witnessAddress != rhs.witnessAddress {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "expiration"),
    3: .standard(proto: "block_header"),
    4: .standard(proto: "fee_limit"),
    10: .same(proto: "transfer"),
    11: .standard(proto: "transfer_asset"),
    12: .standard(proto: "freeze_balance"),
    13: .standard(proto: "unfreeze_balance"),
    14: .standard(proto: "unfreeze_asset"),
    15: .standard(proto: "withdraw_balance"),
    16: .standard(proto: "vote_asset"),
    17: .standard(proto: "vote_witness"),
    18: .standard(proto: "trigger_smart_contract"),
    19: .standard(proto: "transfer_trc20_contract"),
  ]

  fileprivate class _StorageClass {
    var _timestamp: Int64 = 0
    var _expiration: Int64 = 0
    var _blockHeader: TW_Tron_Proto_BlockHeader? = nil
    var _feeLimit: Int64 = 0
    var _contractOneof: TW_Tron_Proto_Transaction.OneOf_ContractOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timestamp = source._timestamp
      _expiration = source._expiration
      _blockHeader = source._blockHeader
      _feeLimit = source._feeLimit
      _contractOneof = source._contractOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._expiration)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._blockHeader)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._feeLimit)
        case 10:
          var v: TW_Tron_Proto_TransferContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .transfer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .transfer(v)}
        case 11:
          var v: TW_Tron_Proto_TransferAssetContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .transferAsset(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .transferAsset(v)}
        case 12:
          var v: TW_Tron_Proto_FreezeBalanceContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .freezeBalance(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .freezeBalance(v)}
        case 13:
          var v: TW_Tron_Proto_UnfreezeBalanceContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .unfreezeBalance(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .unfreezeBalance(v)}
        case 14:
          var v: TW_Tron_Proto_UnfreezeAssetContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .unfreezeAsset(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .unfreezeAsset(v)}
        case 15:
          var v: TW_Tron_Proto_WithdrawBalanceContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .withdrawBalance(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .withdrawBalance(v)}
        case 16:
          var v: TW_Tron_Proto_VoteAssetContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .voteAsset(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .voteAsset(v)}
        case 17:
          var v: TW_Tron_Proto_VoteWitnessContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .voteWitness(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .voteWitness(v)}
        case 18:
          var v: TW_Tron_Proto_TriggerSmartContract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .triggerSmartContract(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .triggerSmartContract(v)}
        case 19:
          var v: TW_Tron_Proto_TransferTRC20Contract?
          if let current = _storage._contractOneof {
            try decoder.handleConflictingOneOf()
            if case .transferTrc20Contract(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contractOneof = .transferTrc20Contract(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 1)
      }
      if _storage._expiration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._expiration, fieldNumber: 2)
      }
      if let v = _storage._blockHeader {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._feeLimit != 0 {
        try visitor.visitSingularInt64Field(value: _storage._feeLimit, fieldNumber: 4)
      }
      switch _storage._contractOneof {
      case .transfer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .transferAsset(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .freezeBalance(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .unfreezeBalance(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .unfreezeAsset(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .withdrawBalance(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .voteAsset(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .voteWitness(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case .triggerSmartContract(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      case .transferTrc20Contract(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_Transaction, rhs: TW_Tron_Proto_Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._expiration != rhs_storage._expiration {return false}
        if _storage._blockHeader != rhs_storage._blockHeader {return false}
        if _storage._feeLimit != rhs_storage._feeLimit {return false}
        if _storage._contractOneof != rhs_storage._contractOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .standard(proto: "private_key"),
  ]

  fileprivate class _StorageClass {
    var _transaction: TW_Tron_Proto_Transaction? = nil
    var _privateKey: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _privateKey = source._privateKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._privateKey)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_SigningInput, rhs: TW_Tron_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "signature"),
    3: .standard(proto: "ref_block_bytes"),
    4: .standard(proto: "ref_block_hash"),
    5: .same(proto: "json"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.id)
      case 2: try decoder.decodeSingularBytesField(value: &self.signature)
      case 3: try decoder.decodeSingularBytesField(value: &self.refBlockBytes)
      case 4: try decoder.decodeSingularBytesField(value: &self.refBlockHash)
      case 5: try decoder.decodeSingularStringField(value: &self.json)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if !self.refBlockBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.refBlockBytes, fieldNumber: 3)
    }
    if !self.refBlockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.refBlockHash, fieldNumber: 4)
    }
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_SigningOutput, rhs: TW_Tron_Proto_SigningOutput) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.refBlockBytes != rhs.refBlockBytes {return false}
    if lhs.refBlockHash != rhs.refBlockHash {return false}
    if lhs.json != rhs.json {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
